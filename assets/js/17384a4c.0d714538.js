"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2572],{15680:(e,t,a)=>{a.r(t),a.d(t,{MDXContext:()=>c,MDXProvider:()=>p,mdx:()=>f,useMDXComponents:()=>u,withMDXComponents:()=>d});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},i.apply(this,arguments)}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),d=function(e){return function(t){var a=u(t.components);return n.createElement(e,i({},t,{components:a}))}},u=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},m="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(a),p=r,m=d["".concat(o,".").concat(p)]||d[p]||b[p]||i;return a?n.createElement(m,l(l({ref:t},c),{},{components:a})):n.createElement(m,l({ref:t},c))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},7227:(e,t,a)=>{a.r(t),a.d(t,{default:()=>o});var n=a(96540),r=a(20053);const i={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.default)(i.tabItem,o),hidden:a},t)}},49489:(e,t,a)=>{a.r(t),a.d(t,{default:()=>_});var n=a(58168),r=a(96540),i=a(20053),o=a(24245),l=a(56347),s=a(62814),c=a(45167),d=a(81269);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function p(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??u(a);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:a}=e;const n=(0,l.W6)(),i=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s.aZ)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(n.location.search);t.set(i,e),n.replace({...n.location,search:t.toString()})}),[i,n])]}function h(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,i=p(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i}))),[s,c]=b({queryString:a,groupId:n}),[u,h]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,i]=(0,d.Dv)(a);return[n,(0,r.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:n}),f=(()=>{const e=s??u;return m({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),h(e)}),[c,h,i]),tabValues:i}}var f=a(11062);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:a,selectedValue:l,selectValue:s,tabValues:c}=e;const d=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.a_)(),p=e=>{const t=e.currentTarget,a=d.indexOf(t),n=c[a].value;n!==l&&(u(t),s(n))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;t=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;t=d[a]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.default)("tabs",{"tabs--block":a},t)},c.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.A)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:p},o,{className:(0,i.default)("tabs__item",v.tabItem,o?.className,{"tabs__item--active":l===t})}),a??t)})))}function y(e){let{lazy:t,children:a,selectedValue:n}=e;const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function x(e){const t=h(e);return r.createElement("div",{className:(0,i.default)("tabs-container",v.tabList)},r.createElement(g,(0,n.A)({},e,t)),r.createElement(y,(0,n.A)({},e,t)))}function _(e){const t=(0,f.default)();return r.createElement(x,(0,n.A)({key:String(t)},e))}},24330:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>b,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var n=a(58168),r=(a(96540),a(15680)),i=a(49489),o=a(7227);const l={sidebar_position:30,title:"Calibration"},s="Calibration Code Snippets",c={unversionedId:"data_utilities/core_code_snippets/calibration",id:"data_utilities/core_code_snippets/calibration",title:"Calibration",description:"In this section, we introduce the Python/C++ API for accessing calibration data from Project Aria VRS files (projectariatools/main/core/calibration).",source:"@site/docs/data_utilities/core_code_snippets/calibration.mdx",sourceDirName:"data_utilities/core_code_snippets",slug:"/data_utilities/core_code_snippets/calibration",permalink:"/projectaria_tools/docs/data_utilities/core_code_snippets/calibration",draft:!1,editUrl:"https://github.com/facebookresearch/projectaria_tools/tree/main/website/docs/data_utilities/core_code_snippets/calibration.mdx",tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30,title:"Calibration"},sidebar:"tutorialSidebar",previous:{title:"Image",permalink:"/projectaria_tools/docs/data_utilities/core_code_snippets/image"},next:{title:"MPS",permalink:"/projectaria_tools/docs/data_utilities/core_code_snippets/mps"}},d={},u=[{value:"Accessing device calibration",id:"accessing-device-calibration",level:3},{value:"Accessing 6DoF poses of sensors with Sophus Python binding",id:"accessing-6dof-poses-of-sensors-with-sophus-python-binding",level:3},{value:"Accessing sensor calibration",id:"accessing-sensor-calibration",level:3},{value:"Accessing ET and Microphone calibration",id:"accessing-et-and-microphone-calibration",level:3},{value:"Python binding for Sophus library",id:"python-binding-for-sophus-library",level:2},{value:"Feature list",id:"feature-list",level:3},{value:"Import Sophus Python binding",id:"import-sophus-python-binding",level:3},{value:"Example code",id:"example-code",level:3},{value:"Vectorization detail",id:"vectorization-detail",level:3},{value:"Passing a single SO3/SE3 object to C++ code in Python binding",id:"passing-a-single-so3se3-object-to-c-code-in-python-binding",level:3}],p={toc:u},m="wrapper";function b(e){let{components:t,...a}=e;return(0,r.mdx)(m,(0,n.A)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"calibration-code-snippets"},"Calibration Code Snippets"),(0,r.mdx)("p",null,"In this section, we introduce the Python/C++ API for accessing calibration data from Project Aria VRS files (",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebookresearch/projectaria_tools/blob/main/core/calibration"},"projectaria_tools/main/core/calibration"),")."),(0,r.mdx)("p",null,"We also introduce Python binding for the ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/strasdat/Sophus"},"Sophus Library"),", providing access to SO3, SE3, interpolate and iterativeMean features (",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebookresearch/projectaria_tools/tree/main/core/python/sophus"},"projectaria_tools/main/core/sophus"),")."),(0,r.mdx)("h3",{id:"accessing-device-calibration"},"Accessing device calibration"),(0,r.mdx)("p",null,"Device calibration stores:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"The device's CAD model, which contains the 6DoF poses of sensors of the device as designed."),(0,r.mdx)("li",{parentName:"ul"},"The calibration of all sensors on a single Aria device. See the ",(0,r.mdx)("a",{parentName:"li",href:"#accessing-sensor-calibration"},"Accessing sensor calibration")," section for details."),(0,r.mdx)("li",{parentName:"ul"},"The device's sub-type (",(0,r.mdx)("inlineCode",{parentName:"li"},"DVT-S")," or ",(0,r.mdx)("inlineCode",{parentName:"li"},"DVT-L")," to indicate small or large)")),(0,r.mdx)(i.default,{groupId:"programming-language",mdxType:"Tabs"},(0,r.mdx)(o.default,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'from projectaria_tools.core import data_provider, calibration\nfrom projectaria_tools.core.stream_id import StreamId\n\nvrsfile = "example.vrs"\nprovider = data_provider.create_vrs_data_provider(vrsfile)\n\n# returns None if vrs does not have a calibration\ndevice_calib = provider.get_device_calibration()\nprint(device_calib.get_device_subtype())\n'))),(0,r.mdx)(o.default,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-cpp"},'#include <dataprovider/VrsDataProvider.h>\nusing namespace projectaria::tools::data_provider;\nusing namespace projectaria::tools::calibration;\n\nstd::string vrsfile = "example.vrs"\nauto maybeProvider = createVrsDataProvider(vrsFilename);\nXR_CHECK(maybeProvider, "Cannot open file");\nauto&provider = *maybeProvider;\n\n// returns nullopt if vrs does not have a calibration\nauto deviceCalib = provider.getDeviceCalibration();\nstd::cout << deviceCalib..getDeviceSubtype() << std::endl;\n')))),(0,r.mdx)("h3",{id:"accessing-6dof-poses-of-sensors-with-sophus-python-binding"},"Accessing 6DoF poses of sensors with Sophus Python binding"),(0,r.mdx)("p",null,"All 6DoF poses (a.k.a. extrinsic parameters) are represented as relative to the device frame.\nThe device frame is a specific sensor frame, identified by the sensor's label. Aria device frame is by default ",(0,r.mdx)("inlineCode",{parentName:"p"},"camera-slam-left"),".\nWe also provide the pose of ",(0,r.mdx)("a",{parentName:"p",href:"/docs/data_formats/coordinate_convention/3d_coordinate_frame_convention#the-nominal-central-pupil-frame-cpf"},"the central-pupil-frame")," in the device frame or as relative to a sensor frame."),(0,r.mdx)(i.default,{groupId:"programming-language",mdxType:"Tabs"},(0,r.mdx)(o.default,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'label = "camera-slam-right"\ntransform_device_sensor = device_calib.get_transform_device_sensor(label)\ntransform_device_cpf = device_calib.get_transform_device_cpf()\ntransform_cpf_sensor = device_calib.get_transform_cpf_sensor(label)\n'))),(0,r.mdx)(o.default,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-cpp"},'std::string label = "camera-slam-right";\nSophus::SE3d T_Device_Sensor = deviceCalib.getT_Device_Sensor(label);\nSophus::SE3d T_Device_Cpf = deviceCalib.getT_Device_Cpf();\nSophus::SE3d T_Cpf_Sensor = deviceCalib.getT_Cpf_Sensor(label);\n')))),(0,r.mdx)("h3",{id:"accessing-sensor-calibration"},"Accessing sensor calibration"),(0,r.mdx)("p",null,"Each sensor on the device ",(0,r.mdx)("em",{parentName:"p"},"may")," have a corresponding stream in the vrs and may have a corresponding calibration.\nHowever, some types of sensors may not have calibration defined for them (e.g. GPS, WPS, bluetooth), and some sensors may not record stream in a specific vrs.\nFor sensor streams where calibration is available, they can be accessed by labels:"),(0,r.mdx)(i.default,{groupId:"programming-language",mdxType:"Tabs"},(0,r.mdx)(o.default,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"# returns None if vrs does not have a calibration\ndevice_calib = provider.get_device_calibration()\nsensor_calib = device_calib.get_sensor_calib(label)\n")),(0,r.mdx)("p",null,"More conveniently, you can just do"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'stream_id = StreamId("1201-1")\ncalib = provider.get_sensor_calibration(stream_id)\n')),(0,r.mdx)("p",null,"If you know the calibration type, you can also do"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'# returns None if the calibration label does not exist\ncam_calib = device_calib.get_camera_calib("camera-rgb");\nimu_calib = device_calib.get_imu_calib("imu-left");\n'))),(0,r.mdx)(o.default,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-cpp"},"// returns nullopt if vrs does not have a calibration\nauto deviceCalib = provider.getDeviceCalibration();\nauto sensorCalib = deviceCalib.getSensorCalib(label);\n")),(0,r.mdx)("p",null,"More conveniently, you can just do"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},'vrs::StreamId streamId = vrs::StreamId::fromNumericalName("1201-1");\nauto maybeCalib = provider.getSensorCalibration(streamId);\n')),(0,r.mdx)("p",null,"If you know the calibration type, you can also do"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-cpp"},'// returns nullopt if the calibration label does not exist\nauto camCalib = deviceCalib.getCameraCalib("camera-rgb");\nauto imuCalib = deviceCalib.getImuCalib("imu-left");\n')))),(0,r.mdx)("h3",{id:"accessing-et-and-microphone-calibration"},"Accessing ET and Microphone calibration"),(0,r.mdx)("p",null,"Note Aria's ET camera stream and audio are special types:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Aria's ET stream switches the stream for left and right ET together, thus its calibration is a pair of CameraCalibration."),(0,r.mdx)("li",{parentName:"ul"},"Aria's Audio stream has 7 channels, thus its calibration is an array of seven microphone calib.")),(0,r.mdx)(i.default,{groupId:"programming-language",mdxType:"Tabs"},(0,r.mdx)(o.default,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"# returns None if the calibration label does not exist\net_calib = device_calib.get_aria_et_camera_calib()\nprint(et_calib[0].get_label())\nmic_calib = device_calib.get_aria_microphone_calib()\nprint(mic_calib[0].get_label())\n"))),(0,r.mdx)(o.default,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-cpp"},"// returns nullopt if the calibration label does not exist\nauto etCalib = *deviceCalib.getAriaEtCalib()\nstd::cout << etCalib[0].getLabel() << std::endl;\nauto micCalib = *deviceCalib.getAriaMicCalib()\nstd::cout << micCalib[0].getLabel() << std::endl;\n")))),(0,r.mdx)("div",{id:"sophus"}),(0,r.mdx)("h2",{id:"python-binding-for-sophus-library"},"Python binding for Sophus library"),(0,r.mdx)("p",null,"Sophus Python PyBind implements Python binding for ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/strasdat/Sophus"},"Sophus")," that provides access to SO3, SE3, interpolate and iterativeMean features."),(0,r.mdx)("p",null,"This Python binding has been submitted to Sophus and will be officially supported by the Sophus Library GitHub repo soon. Once it is available through the Sophus Library, this section will point to Sophus documentation and code, to avoid duplication."),(0,r.mdx)("p",null,"The user interface is inspired by ",(0,r.mdx)("a",{parentName:"p",href:"https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.html"},"scipy.spatial.transform.Rotation"),"."),(0,r.mdx)("h3",{id:"feature-list"},"Feature list"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"SO3",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Initialize with from_quat(), from_matrix(), exp()"),(0,r.mdx)("li",{parentName:"ul"},"Convert to functions: to_quat(), to_matrix(), log()"),(0,r.mdx)("li",{parentName:"ul"},"Multiplication with SO3 or 3D points"),(0,r.mdx)("li",{parentName:"ul"},"Operator [] for setting/getting items with index or slices"),(0,r.mdx)("li",{parentName:"ul"},"Inverse, copy, print, and len"),(0,r.mdx)("li",{parentName:"ul"},"Function vectorization"))),(0,r.mdx)("li",{parentName:"ul"},"SE3",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Initialize with from_quat_and_translation(), from_matrix(), from_matrix3x4(), exp()"),(0,r.mdx)("li",{parentName:"ul"},"Convert to functions to_quat_and_translation(), to_matrix(), to_matrix3x4(), log()"),(0,r.mdx)("li",{parentName:"ul"},"Multiplication with SE3 or 3D points"),(0,r.mdx)("li",{parentName:"ul"},"Get rotation and translation component with rotation() and translation()"),(0,r.mdx)("li",{parentName:"ul"},"Operator [] for setting/getting items with index or slices"),(0,r.mdx)("li",{parentName:"ul"},"Function vectorization"),(0,r.mdx)("li",{parentName:"ul"},"Inverse, copy, print, and len"),(0,r.mdx)("li",{parentName:"ul"},"Interpolate between two SE3"),(0,r.mdx)("li",{parentName:"ul"},"Iterative mean of a group of SE3")))),(0,r.mdx)("h3",{id:"import-sophus-python-binding"},"Import Sophus Python binding"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"from projectaria_tools.core.sophus import SO3, SE3, interpolate, iterativeMean\n")),(0,r.mdx)("h3",{id:"example-code"},"Example code"),(0,r.mdx)("p",null,"Example code is provided in ",(0,r.mdx)("inlineCode",{parentName:"p"},"projectaria_tools/core/examples/sophus_quickstart_tutorial.ipynb")),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"python3 -m jupyter")," ensures that the Jupyter comes from the virtual environment that contains the projectaria_tools module."),(0,r.mdx)("h3",{id:"vectorization-detail"},"Vectorization detail"),(0,r.mdx)("p",null,"In Python, we chose to export our Sophus::SO3 as a vector of SO3 objects by binding the cpp object ",(0,r.mdx)("inlineCode",{parentName:"p"},"SO3Group")," defined below. This is because numerical code in Python tends to work with array of values so that the program can be efficient. This approach is inspired by scipy.spatial.transform.Rotation."),(0,r.mdx)("h3",{id:"passing-a-single-so3se3-object-to-c-code-in-python-binding"},"Passing a single SO3/SE3 object to C++ code in Python binding"),(0,r.mdx)("p",null,"To allow other Python binding C++ code to take in a single SO3/SE3 object, we built a caster so that, even if we wrap SO3Group/SE3Group in Python, those can be implicitly converted to the C++ Sophus::SO3/SE3 object at the boundaries between languages."),(0,r.mdx)("p",null,"This enables us to pass the Python SO3/SE3 object to a C++ function as if they were a regular 1-element Sophus::SO3/SE3 object. This simplifies binding the rest of the C++ code. The implicit cast fails if the Python object is not a 1-element object."))}b.isMDXComponent=!0}}]);