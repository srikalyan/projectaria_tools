"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1449],{15680:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>l,MDXProvider:()=>m,mdx:()=>h,useMDXComponents:()=>p,withMDXComponents:()=>d});var i=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},a.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),d=function(e){return function(n){var t=p(n.components);return i.createElement(e,a({},n,{components:t}))}},p=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=p(e.components);return i.createElement(l.Provider,{value:n},e.children)},u="mdxType",v={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,u=d["".concat(o,".").concat(m)]||d[m]||v[m]||a;return t?i.createElement(u,c(c({ref:n},l),{},{components:t})):i.createElement(u,c({ref:n},l))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[u]="string"==typeof e?e:r,o[1]=c;for(var l=2;l<a;l++)o[l]=t[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},43150:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var i=t(58168),r=(t(96540),t(15680));t(98180);const a={sidebar_position:20,title:"Connection"},o="Connect to the glasses and retrieve device status",c={unversionedId:"ARK/sdk/samples/device_connection",id:"ARK/sdk/samples/device_connection",title:"Connection",description:"Overview",source:"@site/docs/ARK/sdk/samples/device_connection.mdx",sourceDirName:"ARK/sdk/samples",slug:"/ARK/sdk/samples/device_connection",permalink:"/projectaria_tools/docs/ARK/sdk/samples/device_connection",draft:!1,editUrl:"https://github.com/facebookresearch/projectaria_tools/tree/main/website/docs/ARK/sdk/samples/device_connection.mdx",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20,title:"Connection"},sidebar:"tutorialSidebar",previous:{title:"Code Samples",permalink:"/projectaria_tools/docs/ARK/sdk/samples/"},next:{title:"Recording",permalink:"/projectaria_tools/docs/ARK/sdk/samples/device_recording"}},s={},l=[{value:"Overview",id:"overview",level:2},{value:"Running the sample",id:"running-the-sample",level:2},{value:"Code walkthrough",id:"code-walkthrough",level:3},{value:"1. Create and configure a Device Client",id:"1-create-and-configure-a-device-client",level:4},{value:"2. Connect to a Device",id:"2-connect-to-a-device",level:4},{value:"3. Fetch device status and information",id:"3-fetch-device-status-and-information",level:4},{value:"4. Disconnect",id:"4-disconnect",level:4}],d={toc:l},p="wrapper";function m(e){let{components:n,...t}=e;return(0,r.mdx)(p,(0,i.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"connect-to-the-glasses-and-retrieve-device-status"},"Connect to the glasses and retrieve device status"),(0,r.mdx)("h2",{id:"overview"},"Overview"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"device_connect")," example shows how to connect to your Project Aria device using the Client SDK and retrieve:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Device status, such as such as battery level, Wi-Fi SSID or Wi-Fi IP address"),(0,r.mdx)("li",{parentName:"ul"},"Device information, such as the device serial number or device model")),(0,r.mdx)("h2",{id:"running-the-sample"},"Running the sample"),(0,r.mdx)("p",null,"In your terminal, from the samples directory, run:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"python -m device_connect\n")),(0,r.mdx)("p",null,"You should then see:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"[AriaSdk:DeviceControllerImpl][INFO]: Connecting to device <serial_number> using ADB\n[AriaSdk:DeviceClientImpl][INFO]: Connection established with device <serial_number>\nAria Device Status: battery level 100, wifi ssid <xxxxxxxx> , wifi ip <192.168.xx.xx>, mode DeviceMode.Partner\nAria Device Info: model Aria, serial <serial_number>\nAria Device Connected, disconnecting\n")),(0,r.mdx)("h3",{id:"code-walkthrough"},"Code walkthrough"),(0,r.mdx)("h4",{id:"1-create-and-configure-a-device-client"},"1. Create and configure a Device Client"),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"DeviceClient")," allow you to connect to Project Aria glasses over Wi-Fi or USB."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"device_client = aria.DeviceClient()\n")),(0,r.mdx)("p",null,"By default, ",(0,r.mdx)("inlineCode",{parentName:"p"},"DeviceClient")," connects to Aria glasses over USB. To connect to glasses over Wi-Fi, configure the ",(0,r.mdx)("inlineCode",{parentName:"p"},"DeviceClient")," by creating a ",(0,r.mdx)("inlineCode",{parentName:"p"},"DeviceClientConfig"),", setting ",(0,r.mdx)("inlineCode",{parentName:"p"},"ip_v4_address")," and setting the config."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"client_config = aria.DeviceClientConfig()\nif args.ip_address:\n    client_config.ip_v4_address = args.ip_address\ndevice_client.set_client_config(client_config)\n")),(0,r.mdx)("admonition",{type:"info"},(0,r.mdx)("p",{parentName:"admonition"},"Get your Aria glasses' IP address from the Mobile Companion App by tapping ",(0,r.mdx)("a",{parentName:"p",href:"/docs/ARK/mobile_companion_app#dashboard"},"Wi-Fi on the Dashboard"),".")),(0,r.mdx)("h4",{id:"2-connect-to-a-device"},"2. Connect to a Device"),(0,r.mdx)("p",null,"Connect to the Aria glasses and retrieve a ",(0,r.mdx)("inlineCode",{parentName:"p"},"Device")," instance. An Exception will be thrown if the connection is not successful."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"device = device_client.connect()\n")),(0,r.mdx)("h4",{id:"3-fetch-device-status-and-information"},"3. Fetch device status and information"),(0,r.mdx)("p",null,"We can then obtain the device status and information:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'status = device.status\nprint(\n    "Aria Device Status: battery level {0}, wifi ssid {1}, wifi ip {2}, mode {3}".format(\n        status.battery_level,\n        status.wifi_ssid,\n        status.wifi_ip_address,\n        status.device_mode,\n    )\n)\n')),(0,r.mdx)("p",null,"Check out the ",(0,r.mdx)("a",{parentName:"p",href:"/docs/ARK/sdk/api_reference#ariasdkdevicestatus"},"full status list"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'info = device.info\nprint(\n    "Aria Device Info: model {}, serial {}, manufacturer {}".format(\n        info.model, info.serial, info.manufacturer\n    )\n)\n')),(0,r.mdx)("p",null,"Check out the ",(0,r.mdx)("a",{parentName:"p",href:"/docs/ARK/sdk/api_reference#ariasdkdeviceinfo"},"full information list"),"."),(0,r.mdx)("h4",{id:"4-disconnect"},"4. Disconnect"),(0,r.mdx)("p",null,"Once all operations have been completed, you can disconnect from your glasses to release any held resources."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"device_client.disconnect(device)\n")))}m.isMDXComponent=!0}}]);