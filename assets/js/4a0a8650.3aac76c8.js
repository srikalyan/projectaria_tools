"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8430],{15680:(e,a,t)=>{t.r(a),t.d(a,{MDXContext:()=>d,MDXProvider:()=>u,mdx:()=>h,useMDXComponents:()=>p,withMDXComponents:()=>m});var i=t(96540);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(){return r=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},r.apply(this,arguments)}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);a&&(i=i.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,i,n=function(e,a){if(null==e)return{};var t,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var d=i.createContext({}),m=function(e){return function(a){var t=p(a.components);return i.createElement(e,r({},a,{components:t}))}},p=function(e){var a=i.useContext(d),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},u=function(e){var a=p(e.components);return i.createElement(d.Provider,{value:a},e.children)},c="mdxType",v={inlineCode:"code",wrapper:function(e){var a=e.children;return i.createElement(i.Fragment,{},a)}},f=i.forwardRef((function(e,a){var t=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(t),u=n,c=m["".concat(o,".").concat(u)]||m[u]||v[u]||r;return t?i.createElement(c,l(l({ref:a},d),{},{components:t})):i.createElement(c,l({ref:a},d))}));function h(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var r=t.length,o=new Array(r);o[0]=f;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[c]="string"==typeof e?e:n,o[1]=l;for(var d=2;d<r;d++)o[d]=t[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},36357:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=t(58168),n=(t(96540),t(15680));const r={sidebar_position:10,title:"Python Visualization"},o="Project Aria Tools Python Visualization",l={unversionedId:"data_utilities/visualization/visualization_python",id:"data_utilities/visualization/visualization_python",title:"Python Visualization",description:"Overview",source:"@site/docs/data_utilities/visualization/visualization_python.mdx",sourceDirName:"data_utilities/visualization",slug:"/data_utilities/visualization/visualization_python",permalink:"/projectaria_tools/docs/data_utilities/visualization/visualization_python",draft:!1,editUrl:"https://github.com/facebookresearch/projectaria_tools/tree/main/website/docs/data_utilities/visualization/visualization_python.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"Python Visualization"},sidebar:"tutorialSidebar",previous:{title:"Troubleshooting",permalink:"/projectaria_tools/docs/data_utilities/installation/troubleshooting"},next:{title:"C++ Visualization",permalink:"/projectaria_tools/docs/data_utilities/visualization/visualization_cpp"}},s={},d=[{value:"Overview",id:"overview",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Run Aria Sensor Viewer",id:"run-aria-sensor-viewer",level:2},{value:"Run MPS Viewer",id:"run-mps-viewer",level:2},{value:"Visualization of Multi-SLAM data",id:"visualization-of-multi-slam-data",level:3},{value:"AEA Example",id:"aea-example",level:4},{value:"MPS CLI Example",id:"mps-cli-example",level:4},{value:"An introduction to Rerun",id:"an-introduction-to-rerun",level:2}],m={toc:d},p="wrapper";function u(e){let{components:a,...r}=e;return(0,n.mdx)(p,(0,i.A)({},m,r,{components:a,mdxType:"MDXLayout"}),(0,n.mdx)("h1",{id:"project-aria-tools-python-visualization"},"Project Aria Tools Python Visualization"),(0,n.mdx)("h2",{id:"overview"},"Overview"),(0,n.mdx)("p",null,"This page introduces our core Python visualization tools, developed with ",(0,n.mdx)("a",{parentName:"p",href:"#rerun"},"Rerun"),", that are part of Project Aria Tools."),(0,n.mdx)("ul",null,(0,n.mdx)("li",{parentName:"ul"},(0,n.mdx)("a",{parentName:"li",href:"#viewer_aria_sensors"},"Aria Sensor Viewer"),": 3D visualization of Aria sensors"),(0,n.mdx)("li",{parentName:"ul"},(0,n.mdx)("a",{parentName:"li",href:"#viewer_mps"},"MPS Viewer"),": renders MPS metadata (point cloud, device trajectory and wearer eye gaze)")),(0,n.mdx)("h2",{id:"requirements"},"Requirements"),(0,n.mdx)("ul",null,(0,n.mdx)("li",{parentName:"ul"},(0,n.mdx)("a",{parentName:"li",href:"docs/data_utilities/installation/installation_python#install-via-virtual-environment"},"Python Project Aria Tools is installed")),(0,n.mdx)("li",{parentName:"ul"},"MPS Sample data",(0,n.mdx)("ul",{parentName:"li"},(0,n.mdx)("li",{parentName:"ul"},(0,n.mdx)("a",{parentName:"li",href:"/projectaria_tools/docs/data_utilities/installation/download_mps_sample_data"},"Official Sample Data")," - most up to date sample data"),(0,n.mdx)("li",{parentName:"ul"},(0,n.mdx)("a",{parentName:"li",href:"https://github.com/facebookresearch/projectaria_tools/tree/main/data/mps_sample"},"GitHub Repo Sample dataset")," - useful for unit testing etc. It will work, but is not maintained and updated the way the official sample data is")))),(0,n.mdx)("div",{id:"viewer_aria_sensors"}),(0,n.mdx)("h2",{id:"run-aria-sensor-viewer"},"Run Aria Sensor Viewer"),(0,n.mdx)("p",null,(0,n.mdx)("inlineCode",{parentName:"p"},"viewer_aria_sensors"),"  displays the relative position and orientation of all most of Project Aria glasses sensors (cameras, IMUs, microphones, magnetometer & barometer) in a common reference."),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-bash"},"viewer_aria_sensors --vrs $MPS_SAMPLE_PATH/sample.vrs\n")),(0,n.mdx)("p",null,(0,n.mdx)("img",{alt:"Aria Sensors Viewer",src:t(65490).A,width:"1920",height:"962"})),(0,n.mdx)("admonition",{type:"tip"},(0,n.mdx)("ul",{parentName:"admonition"},(0,n.mdx)("li",{parentName:"ul"},"Selecting the different sensors in the Blueprint left column will help you quickly identify where a given sensor is located"))),(0,n.mdx)("div",{id:"viewer_mps"}),(0,n.mdx)("h2",{id:"run-mps-viewer"},"Run MPS Viewer"),(0,n.mdx)("p",null,(0,n.mdx)("inlineCode",{parentName:"p"},"viewer_mps")," displays an interactive visualization of the Aria VRS RGB frames along with MPS data (Closed loop trajectory, Global point cloud, Wearer eye gaze).\nAs you are playing or moving along the timeline, you can see the position of the camera and the wearer eye gaze direction at the timestamp of your choice."),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-bash"},"\nviewer_mps --vrs $MPS_SAMPLE_PATH/sample.vrs\n\nor to specify each MPS file\n\nviewer_mps --vrs $MPS_SAMPLE_PATH/sample.vrs \\\n--trajectory $MPS_SAMPLE_PATH/closed_loop_trajectory.csv \\\n--points $MPS_SAMPLE_PATH/global_points.csv.gz \\\n--eyegaze $MPS_SAMPLE_PATH/generalized_eye_gaze.csv\n")),(0,n.mdx)("p",null,(0,n.mdx)("img",{alt:"MPS Visualizer",src:t(69617).A,width:"1920",height:"987"})),(0,n.mdx)("div",{id:"multi-slam"}," "),(0,n.mdx)("admonition",{type:"tip"},(0,n.mdx)("ul",{parentName:"admonition"},(0,n.mdx)("li",{parentName:"ul"},"Switching between device_time and timestamp timeline allows you to retrieve a specific timestamp for the VRS sequence or MPS annotation"))),(0,n.mdx)("h3",{id:"visualization-of-multi-slam-data"},"Visualization of Multi-SLAM data"),(0,n.mdx)("p",null,"The MPS Viewer can also be used to visualize 3D data from multiple Project Aria devices, if the MPS data has been generated using ",(0,n.mdx)("a",{parentName:"p",href:"/projectaria_tools/docs/data_formats/mps/slam/mps_multi_slam"},"Multi-SLAM")," or is part of datasets that contain this type of data, such as ",(0,n.mdx)("a",{parentName:"p",href:"/projectaria_tools/docs/open_datasets/aria_everyday_activities_dataset/"},"Aria Everyday Activities (AEA)"),"."),(0,n.mdx)("h4",{id:"aea-example"},"AEA Example"),(0,n.mdx)("p",null,"The example below uses Trajectory and Semi-Dense Point Cloud data from AEA. Go to ",(0,n.mdx)("a",{parentName:"p",href:"/projectaria_tools/docs/open_datasets/aria_everyday_activities_dataset/aea_download_dataset"},"AEA Dataset Download")," for how to download this data."),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-bash"},"viewer_mps --trajectory `find -P ~/Documents/projectaria_tools_aea_data/loc1*/*/*/closed_loop_trajectory.csv -print` --points `find -P Documents/projectaria_tools_aea_data/loc1*/*/*/semidense_points.csv.gz -print`\n")),(0,n.mdx)("p",null,(0,n.mdx)("img",{alt:"Visualization of aligned AEA 3D data",src:t(72001).A,width:"1200",height:"542"})),(0,n.mdx)("h4",{id:"mps-cli-example"},"MPS CLI Example"),(0,n.mdx)("p",null,"The following visualization uses Multi-Slam data generated using MPS CLI sample data. The ",(0,n.mdx)("a",{parentName:"p",href:"/projectaria_tools/docs/ARK/mps/request_mps/mps_cli"},"MPS CLI")," is part of the ",(0,n.mdx)("a",{parentName:"p",href:"https://www.projectaria.com/research-kit/"},"Aria Research Kit"),"."),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-bash"},"viewer_mps --trajectory `find -P  ~/documents/multi_slam_output/*/*/closed_loop_trajectory.csv -print` --points `find -P ~/documents/multi_slam_output/*/*/semidense_points.csv.gz -print`\n")),(0,n.mdx)("div",{id:"rerun"}," "),(0,n.mdx)("p",null,(0,n.mdx)("img",{alt:"Visualization of aligned 3D data",src:t(2922).A,width:"2052",height:"1156"})),(0,n.mdx)("h2",{id:"an-introduction-to-rerun"},"An introduction to Rerun"),(0,n.mdx)("p",null,(0,n.mdx)("a",{parentName:"p",href:"https://www.rerun.io/"},"Rerun")," is an open source SDK and engine for visualizing and interacting with multi modal data streams. It's usable from Python, Rust and C++. Rerun consists in a log API and a visualizer."),(0,n.mdx)("p",null,"The main GUI sections of the Rerun visualizer are:"),(0,n.mdx)("ul",null,(0,n.mdx)("li",{parentName:"ul"},"BluePrint",(0,n.mdx)("ul",{parentName:"li"},(0,n.mdx)("li",{parentName:"ul"},"A: User defined Scene Graph (Entities and hierarchy you define)"),(0,n.mdx)("li",{parentName:"ul"},"B: Visual view of the Scene Graph (User customizable)"))),(0,n.mdx)("li",{parentName:"ul"},"Timeline",(0,n.mdx)("ul",{parentName:"li"},(0,n.mdx)("li",{parentName:"ul"},"C: Interactive navigation and inspection of log events on multiple timeline (log, frame, or device time)"))),(0,n.mdx)("li",{parentName:"ul"},"Visibility and property control",(0,n.mdx)("ul",{parentName:"li"},(0,n.mdx)("li",{parentName:"ul"},"D: Fine grained control and inspection of Entities/Components")))),(0,n.mdx)("p",null,(0,n.mdx)("img",{alt:"Rerun Visualizer Interface",src:t(79953).A,width:"1952",height:"1196"})))}u.isMDXComponent=!0},2922:(e,a,t)=>{t.d(a,{A:()=>i});const i=t.p+"assets/images/mps_cli_multi-slam_visualization-dd8f64acac44ae77f2a23249ae1301ba.png"},79953:(e,a,t)=>{t.d(a,{A:()=>i});const i=t.p+"assets/images/rerun-intro-8864d1f6fc4a245fecaaa3d0a5c2a39f.png"},69617:(e,a,t)=>{t.d(a,{A:()=>i});const i=t.p+"assets/images/rerun-mps-85c8538d570aa70830d3eb25c1c30d99.png"},65490:(e,a,t)=>{t.d(a,{A:()=>i});const i=t.p+"assets/images/rerun-sensors-cbe9cd476064a1b4e18a683e8e9cf5dd.png"},72001:(e,a,t)=>{t.d(a,{A:()=>i});const i=t.p+"assets/images/aea_mps_data_viewer-dfa6cc4662c6c6cda2c11bb26ab640f9.png"}}]);