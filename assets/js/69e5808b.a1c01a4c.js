"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[840],{15680:(e,a,t)=>{t.r(a),t.d(a,{MDXContext:()=>d,MDXProvider:()=>p,mdx:()=>b,useMDXComponents:()=>u,withMDXComponents:()=>m});var r=t(96540);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(){return i=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i.apply(this,arguments)}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var d=r.createContext({}),m=function(e){return function(a){var t=u(a.components);return r.createElement(e,i({},a,{components:t}))}},u=function(e){var a=r.useContext(d),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},p=function(e){var a=u(e.components);return r.createElement(d.Provider,{value:a},e.children)},c="mdxType",v={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},f=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=u(t),p=n,c=m["".concat(o,".").concat(p)]||m[p]||v[p]||i;return t?r.createElement(c,l(l({ref:a},d),{},{components:t})):r.createElement(c,l({ref:a},d))}));function b(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=f;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[c]="string"==typeof e?e:n,o[1]=l;for(var d=2;d<i;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7227:(e,a,t)=>{t.r(a),t.d(a,{default:()=>o});var r=t(96540),n=t(20053);const i={tabItem:"tabItem_Ymn6"};function o(e){let{children:a,hidden:t,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.default)(i.tabItem,o),hidden:t},a)}},49489:(e,a,t)=>{t.r(a),t.d(a,{default:()=>h});var r=t(58168),n=t(96540),i=t(20053),o=t(24245),l=t(56347),s=t(62814),d=t(45167),m=t(81269);function u(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:a,label:t,attributes:r,default:n}}=e;return{value:a,label:t,attributes:r,default:n}}))}function p(e){const{values:a,children:t}=e;return(0,n.useMemo)((()=>{const e=a??u(t);return function(e){const a=(0,d.X)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function c(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function v(e){let{queryString:a=!1,groupId:t}=e;const r=(0,l.W6)(),i=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,s.aZ)(i),(0,n.useCallback)((e=>{if(!i)return;const a=new URLSearchParams(r.location.search);a.set(i,e),r.replace({...r.location,search:a.toString()})}),[i,r])]}function f(e){const{defaultValue:a,queryString:t=!1,groupId:r}=e,i=p(e),[o,l]=(0,n.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!c({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:a,tabValues:i}))),[s,d]=v({queryString:t,groupId:r}),[u,f]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[r,i]=(0,m.Dv)(t);return[r,(0,n.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:r}),b=(()=>{const e=s??u;return c({value:e,tabValues:i})?e:null})();(0,n.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!c({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),f(e)}),[d,f,i]),tabValues:i}}var b=t(11062);const _={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:a,block:t,selectedValue:l,selectValue:s,tabValues:d}=e;const m=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.a_)(),p=e=>{const a=e.currentTarget,t=m.indexOf(a),r=d[t].value;r!==l&&(u(a),s(r))},c=e=>{let a=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=m.indexOf(e.currentTarget)+1;a=m[t]??m[0];break}case"ArrowLeft":{const t=m.indexOf(e.currentTarget)-1;a=m[t]??m[m.length-1];break}}a?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.default)("tabs",{"tabs--block":t},a)},d.map((e=>{let{value:a,label:t,attributes:o}=e;return n.createElement("li",(0,r.A)({role:"tab",tabIndex:l===a?0:-1,"aria-selected":l===a,key:a,ref:e=>m.push(e),onKeyDown:c,onClick:p},o,{className:(0,i.default)("tabs__item",_.tabItem,o?.className,{"tabs__item--active":l===a})}),t??a)})))}function g(e){let{lazy:a,children:t,selectedValue:r}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(a){const e=i.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},i.map(((e,a)=>(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==r}))))}function x(e){const a=f(e);return n.createElement("div",{className:(0,i.default)("tabs-container",_.tabList)},n.createElement(y,(0,r.A)({},e,a)),n.createElement(g,(0,r.A)({},e,a)))}function h(e){const a=(0,b.default)();return n.createElement(x,(0,r.A)({key:String(a)},e))}},14622:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>m,contentTitle:()=>s,default:()=>v,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var r=t(58168),n=(t(96540),t(15680)),i=t(49489),o=t(7227);const l={sidebar_position:10,title:"Data Provider"},s="Aria Data Provider Code Snippets",d={unversionedId:"data_utilities/core_code_snippets/data_provider",id:"data_utilities/core_code_snippets/data_provider",title:"Data Provider",description:"In this section, we introduce the Python/C++ API to access sensor data in Project Aria VRS files (projectariatools/main/core/dataprovider).",source:"@site/docs/data_utilities/core_code_snippets/data_provider.mdx",sourceDirName:"data_utilities/core_code_snippets",slug:"/data_utilities/core_code_snippets/data_provider",permalink:"/projectaria_tools/docs/data_utilities/core_code_snippets/data_provider",draft:!1,editUrl:"https://github.com/facebookresearch/projectaria_tools/tree/main/website/docs/data_utilities/core_code_snippets/data_provider.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"Data Provider"},sidebar:"tutorialSidebar",previous:{title:"C++ Visualization",permalink:"/projectaria_tools/docs/data_utilities/visualization/visualization_cpp"},next:{title:"Image",permalink:"/projectaria_tools/docs/data_utilities/core_code_snippets/image"}},m={},u=[{value:"Open a VRS file",id:"open-a-vrs-file",level:3},{value:"Mapping between labels and stream ids",id:"mapping-between-labels-and-stream-ids",level:3},{value:"Random access data by index",id:"random-access-data-by-index",level:3},{value:"Random access data by timestamp",id:"random-access-data-by-timestamp",level:3},{value:"Deliver all sensor data in VRS",id:"deliver-all-sensor-data-in-vrs",level:3}],p={toc:u},c="wrapper";function v(e){let{components:a,...t}=e;return(0,n.mdx)(c,(0,r.A)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,n.mdx)("h1",{id:"aria-data-provider-code-snippets"},"Aria Data Provider Code Snippets"),(0,n.mdx)("p",null,"In this section, we introduce the Python/C++ API to access sensor data in Project Aria VRS files (",(0,n.mdx)("a",{parentName:"p",href:"https://github.com/facebookresearch/projectaria_tools/blob/main/core/data_provider"},"projectaria_tools/main/core/data_provider"),")."),(0,n.mdx)("h3",{id:"open-a-vrs-file"},"Open a VRS file"),(0,n.mdx)(i.default,{groupId:"programming-language",mdxType:"Tabs"},(0,n.mdx)(o.default,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'from projectaria_tools.core import data_provider\nfrom projectaria_tools.core.sensor_data import TimeDomain, TimeQueryOptions\nfrom projectaria_tools.core.stream_id import RecordableTypeId, StreamId\n\nvrsfile = "example.vrs"\nprovider = data_provider.create_vrs_data_provider(vrsfile)\nassert provider is not None, "Cannot open file"\n'))),(0,n.mdx)(o.default,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-cpp"},'#include <dataprovider/VrsDataProvider.h>\nusing namespace projectaria::tools::data_provider;\n\nstd::string vrsfile = "example.vrs"\nauto maybeProvider = createVrsDataProvider(vrsFilename);\nXR_CHECK(maybeProvider, "Cannot open file");\nVrsDataProvider& provider = *maybeProvider;\n')))),(0,n.mdx)("h3",{id:"mapping-between-labels-and-stream-ids"},"Mapping between labels and stream ids"),(0,n.mdx)(i.default,{groupId:"programming-language",mdxType:"Tabs"},(0,n.mdx)(o.default,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.mdx)("p",null,"Stream IDs can be mapped from labels by using ",(0,n.mdx)("inlineCode",{parentName:"p"},"get_stream_id_from_label"),":"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'stream_id = provider.get_stream_id_from_label("camera-slam-left")\n')),(0,n.mdx)("p",null,"Inversely, you can retrieve a label from a stream ID by using ",(0,n.mdx)("inlineCode",{parentName:"p"},"get_stream_id_from_label"),":"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'label = provider.get_label_from_stream_id(StreamId("1201-1"))\n'))),(0,n.mdx)(o.default,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.mdx)("p",null,"Stream IDs can be mapped from labels by using ",(0,n.mdx)("inlineCode",{parentName:"p"},"getStreamIdFromLabel"),":"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-cpp"},'auto streamId = provider.getStreamIdFromLabel("camera-slam-left");\n')),(0,n.mdx)("p",null,"Inversely, you can retrieve a label from a stream id by using ",(0,n.mdx)("inlineCode",{parentName:"p"},"getLabelFromStreamId"),"."),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-cpp"},'auto label = provider.getLabelFromStreamId(StreamId::fromNumericalName("1201-1"));\n')))),(0,n.mdx)("h3",{id:"random-access-data-by-index"},"Random access data by index"),(0,n.mdx)(i.default,{groupId:"programming-language",mdxType:"Tabs"},(0,n.mdx)(o.default,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"for stream_id in provider.get_all_streams():\n  for i in range(0, provider.get_num_data(stream_id)):\n    sensor_data =  provider.get_sensor_data_by_index(stream_id, i)\n"))),(0,n.mdx)(o.default,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-cpp"},"for (const auto& streamId : provider.getAllStreams()) {\n  for( size_t i =  0 ; i < provider.getNumData(streamId); ++i) {\n    auto sensorData =  provider.getSensorDataByIndex(streamId, i);\n  }\n}\n")))),(0,n.mdx)("h3",{id:"random-access-data-by-timestamp"},"Random access data by timestamp"),(0,n.mdx)("p",null,"Project Aria data has four kinds of TimeDomain entries. We strongly recommend always working with ",(0,n.mdx)("inlineCode",{parentName:"p"},"DEVICE_TIME")," when using single-device Aria data. The ",(0,n.mdx)("inlineCode",{parentName:"p"},"TIME_CODE")," TimeDomain is used when synchronizing time across multiple devices. Go to ",(0,n.mdx)("a",{parentName:"p",href:"/projectaria_tools/docs/data_formats/aria_vrs/timestamps_in_aria_vrs"},"Timestamps in Aria VRS Files")," for more information."),(0,n.mdx)(i.default,{groupId:"programming-language",mdxType:"Tabs"},(0,n.mdx)(o.default,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.mdx)("ul",null,(0,n.mdx)("li",{parentName:"ul"},"TimeDomain.RECORD_TIME"),(0,n.mdx)("li",{parentName:"ul"},"TimeDomain.DEVICE_TIME - recommended"),(0,n.mdx)("li",{parentName:"ul"},"TimeDomain.HOST_TIME"),(0,n.mdx)("li",{parentName:"ul"},"TimeDomain.TIME_CODE - for multiple devices")),(0,n.mdx)("p",null,"You can also search using three different time query options:"),(0,n.mdx)("ul",null,(0,n.mdx)("li",{parentName:"ul"},"TimeQueryOptions.BEFORE (default): last data with t <= t_query"),(0,n.mdx)("li",{parentName:"ul"},"TimeQueryOptions.AFTER : first data with t >= t_query"),(0,n.mdx)("li",{parentName:"ul"},"TimeQueryOptions.CLOSEST : the data where |t - t_query| is smallest")),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"for stream_id in provider.get_all_streams():\n  t_first = provider.get_first_time_ns(stream_id, TimeDomain.DEVICE_TIME)\n  t_last = provider.get_last_time_ns(stream_id, TimeDomain.DEVICE_TIME)\n  query_timestamp = (t_first + t_last) // 2 # example query timestamp\n  sensor_data = provider.get_sensor_data_by_time_ns(stream_id, query_timestamp, TimeDomain.DEVICE_TIME, TimeQueryOptions.CLOSEST)\n"))),(0,n.mdx)(o.default,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.mdx)("ul",null,(0,n.mdx)("li",{parentName:"ul"},"TimeDomain::RecordTime"),(0,n.mdx)("li",{parentName:"ul"},"TimeDomain::DeviceTime - recommended"),(0,n.mdx)("li",{parentName:"ul"},"TimeDomain::HostTime"),(0,n.mdx)("li",{parentName:"ul"},"TimeDomain::TimeCode - for multiple devices")),(0,n.mdx)("p",null,"You can also search using three different time query options:"),(0,n.mdx)("ul",null,(0,n.mdx)("li",{parentName:"ul"},"TimeQueryOptions::Before : last data with t <= t_query"),(0,n.mdx)("li",{parentName:"ul"},"TimeQueryOptions::After : first data with t >= t_query"),(0,n.mdx)("li",{parentName:"ul"},"TimeQueryOptions::Closest : the data where |t - t_query| is smallest")),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-cpp"},"for (const auto& streamId : provider.getAllStreams()) {\n  int64_t tFirst = provider.getFirstTimeNs(streamId, TimeDomain::DeviceTime);\n  int64_t tLast = provider.getLastTimeNs(streamId, TimeDomain::DeviceTime);\n\n  auto queryTimestamp = (tFirst + tLast) / 2; // example query timestamp\n  auto sensorData = provider.getSensorDataByTimeNs(streamId, queryTimestamp, TimeDomain::DeviceTime, TimeQueryOptions::Closest);\n}\n")))),(0,n.mdx)("h3",{id:"deliver-all-sensor-data-in-vrs"},"Deliver all sensor data in VRS"),(0,n.mdx)(i.default,{groupId:"programming-language",mdxType:"Tabs"},(0,n.mdx)(o.default,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.mdx)("p",null,"Async iterator to deliver sensor data for all streams in device time order:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"for data in provider.deliver_queued_sensor_data():\n  print(data.get_time_ns(TimeDomain.DEVICE_TIME))\n")),(0,n.mdx)("p",null,"Alternatively, you can use iterator-type syntax:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},"seq = provider.deliver_queued_sensor_data()\nobj = next(seq)\nwhile True:\n  print(obj.get_time_ns(TimeDomain.DEVICE_TIME))\n  try:\n    obj = next(seq)\n  except StopIteration:\n    break\n")),(0,n.mdx)("p",null,"Deliver with sub-stream selection, time truncation, and frame rate sub-sampling:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'# Starts by default options which activates all sensors\ndeliver_option = provider.get_default_deliver_queued_options()\n\n# Only play data from two cameras, also reduce framerate to half of vrs\ndeliver_option.deactivate_stream_all()\nfor label in ["camera-slam-left", "camera-slam-right"]:\n  streamId = provider.get_stream_id_from_label(label)\n  deliver_option.activate_stream(streamId)\n  deliver_option.set_subsample_rate(streamId, 2)\n\n# skip first 100ns\ndeliver_option.set_truncate_first_device_time_ns(100)\nfor data in provider.deliver_queued_sensor_data() :\n  print(data.get_time_ns(TimeDomain.DEVICE_TIME))\n'))),(0,n.mdx)(o.default,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.mdx)("p",null,"Async iterator to deliver sensor data for all streams in device time order:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-cpp"},"for (const SensorData& data : provider.deliverQueuedSensorData()) {\n  std::cout << data.getTimeNs(TimeDomain::DeviceTime) << std::endl;\n}\n")),(0,n.mdx)("p",null,"Alternatively, you can use iterator-type syntax:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-cpp"},"auto seq = provider.deliverQueuedSensorData();\nfor (const auto& it = seq.begin(), it != seq.end(); ++it) {\n  SensorData data = *it;\n  std::cout << data.getTimeNs(TimeDomain::DeviceTime) << std::endl;\n}\n")),(0,n.mdx)("p",null,"Deliver with sub-stream selection, time truncation, and frame rate sub-sampling:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-cpp"},'// Starts by default options which activates all sensors\ndeliverOption = provider.getDefaultDeliverQueuedOptions();\ndeliverOption.deactivateStreamAll();\n\n// Only play data from two cameras, also reduce framerate to half of vrs\nfor (const auto& label : {"camera-slam-left", "camera-slam-right"}) {\n  std::optional<vrs::StreamId> maybeStreamId = provider.getStreamIdFromLabel(label);\n  if (maybeStreamId) {\n    deliverOption.activateStream(maybeStreamId.value());\n    deliverOption.setSubsampleRate(maybeStreamId.value(), 2);\n  }\n}\n\n// skip first 100ns\ndeliverOption.setTruncateFirstDeviceTimeNs(100);\nfor (const SensorData& data : provider.deliverQueuedSensorData(deliverOption)) {\n  std::cout << data.getTimeNs(TimeDomain::DeviceTime) << std::endl;\n}\n')))))}v.isMDXComponent=!0}}]);