"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6635],{15680:(e,a,t)=>{t.r(a),t.d(a,{MDXContext:()=>c,MDXProvider:()=>u,mdx:()=>_,useMDXComponents:()=>m,withMDXComponents:()=>s});var r=t(96540);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(){return i=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i.apply(this,arguments)}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function d(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var c=r.createContext({}),s=function(e){return function(a){var t=m(a.components);return r.createElement(e,i({},a,{components:t}))}},m=function(e){var a=r.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},u=function(e){var a=m(e.components);return r.createElement(c.Provider,{value:a},e.children)},p="mdxType",b={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},g=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),s=m(t),u=n,p=s["".concat(o,".").concat(u)]||s[u]||b[u]||i;return t?r.createElement(p,l(l({ref:a},c),{},{components:t})):r.createElement(p,l({ref:a},c))}));function _(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=g;var l={};for(var d in a)hasOwnProperty.call(a,d)&&(l[d]=a[d]);l.originalType=e,l[p]="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},7227:(e,a,t)=>{t.r(a),t.d(a,{default:()=>o});var r=t(96540),n=t(20053);const i={tabItem:"tabItem_Ymn6"};function o(e){let{children:a,hidden:t,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.default)(i.tabItem,o),hidden:t},a)}},49489:(e,a,t)=>{t.r(a),t.d(a,{default:()=>x});var r=t(58168),n=t(96540),i=t(20053),o=t(24245),l=t(56347),d=t(62814),c=t(45167),s=t(81269);function m(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:a,label:t,attributes:r,default:n}}=e;return{value:a,label:t,attributes:r,default:n}}))}function u(e){const{values:a,children:t}=e;return(0,n.useMemo)((()=>{const e=a??m(t);return function(e){const a=(0,c.X)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function p(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function b(e){let{queryString:a=!1,groupId:t}=e;const r=(0,l.W6)(),i=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,d.aZ)(i),(0,n.useCallback)((e=>{if(!i)return;const a=new URLSearchParams(r.location.search);a.set(i,e),r.replace({...r.location,search:a.toString()})}),[i,r])]}function g(e){const{defaultValue:a,queryString:t=!1,groupId:r}=e,i=u(e),[o,l]=(0,n.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!p({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:a,tabValues:i}))),[d,c]=b({queryString:t,groupId:r}),[m,g]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[r,i]=(0,s.Dv)(t);return[r,(0,n.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:r}),_=(()=>{const e=d??m;return p({value:e,tabValues:i})?e:null})();(0,n.useLayoutEffect)((()=>{_&&l(_)}),[_]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),g(e)}),[c,g,i]),tabValues:i}}var _=t(11062);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:a,block:t,selectedValue:l,selectValue:d,tabValues:c}=e;const s=[],{blockElementScrollPositionUntilNextRender:m}=(0,o.a_)(),u=e=>{const a=e.currentTarget,t=s.indexOf(a),r=c[t].value;r!==l&&(m(a),d(r))},p=e=>{let a=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;a=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;a=s[t]??s[s.length-1];break}}a?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.default)("tabs",{"tabs--block":t},a)},c.map((e=>{let{value:a,label:t,attributes:o}=e;return n.createElement("li",(0,r.A)({role:"tab",tabIndex:l===a?0:-1,"aria-selected":l===a,key:a,ref:e=>s.push(e),onKeyDown:p,onClick:u},o,{className:(0,i.default)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":l===a})}),t??a)})))}function h(e){let{lazy:a,children:t,selectedValue:r}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(a){const e=i.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},i.map(((e,a)=>(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==r}))))}function y(e){const a=g(e);return n.createElement("div",{className:(0,i.default)("tabs-container",f.tabList)},n.createElement(v,(0,r.A)({},e,a)),n.createElement(h,(0,r.A)({},e,a)))}function x(e){const a=(0,_.default)();return n.createElement(y,(0,r.A)({key:String(a)},e))}},81531:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>d,default:()=>b,frontMatter:()=>l,metadata:()=>c,toc:()=>m});var r=t(58168),n=(t(96540),t(15680)),i=t(49489),o=t(7227);const l={sidebar_position:20,title:"Image Utilities (Python and C++)"},d="Advanced Image Utilities",c={unversionedId:"data_utilities/advanced_code_snippets/image_utilities",id:"data_utilities/advanced_code_snippets/image_utilities",title:"Image Utilities (Python and C++)",description:"Overview",source:"@site/docs/data_utilities/advanced_code_snippets/image_utilities.mdx",sourceDirName:"data_utilities/advanced_code_snippets",slug:"/data_utilities/advanced_code_snippets/image_utilities",permalink:"/projectaria_tools/docs/data_utilities/advanced_code_snippets/image_utilities",draft:!1,editUrl:"https://github.com/facebookresearch/projectaria_tools/tree/main/website/docs/data_utilities/advanced_code_snippets/image_utilities.mdx",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20,title:"Image Utilities (Python and C++)"},sidebar:"tutorialSidebar",previous:{title:"Plot Sensor Data (Python)",permalink:"/projectaria_tools/docs/data_utilities/advanced_code_snippets/plotting_sensor_data"},next:{title:"Export VRS to MP4 (Python)",permalink:"/projectaria_tools/docs/data_utilities/advanced_code_snippets/vrs_to_mp4"}},s={},m=[{value:"Overview",id:"overview",level:2},{value:"Image debayer",id:"image-debayer",level:2},{value:"Image undistortion",id:"image-undistortion",level:2},{value:"Rotated image clockwise 90 degrees",id:"rotated-image-clockwise-90-degrees",level:2}],u={toc:m},p="wrapper";function b(e){let{components:a,...l}=e;return(0,n.mdx)(p,(0,r.A)({},u,l,{components:a,mdxType:"MDXLayout"}),(0,n.mdx)("h1",{id:"advanced-image-utilities"},"Advanced Image Utilities"),(0,n.mdx)("h2",{id:"overview"},"Overview"),(0,n.mdx)("p",null,"This page provides advanced image utilities code snippets for Project Aria Tools, see also ",(0,n.mdx)("a",{parentName:"p",href:"/docs/data_utilities/core_code_snippets/image"},"Image Code Snippets"),"."),(0,n.mdx)("h2",{id:"image-debayer"},"Image debayer"),(0,n.mdx)("p",null,"Some recording profiles outputs raw RGB images (Profile 7 in ",(0,n.mdx)("a",{parentName:"p",href:"/docs/tech_spec/recording_profiles"},"Recording Profile"),"). We provide functionalities to debayer them and perform white-balancing to get RGB images."),(0,n.mdx)(i.default,{groupId:"programming-language",mdxType:"Tabs"},(0,n.mdx)(o.default,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'from projectaria_tools.core import data_provider, image\n\nstream_id = provider.get_stream_id_from_label("camera-rgb")\nimage_data = provider.get_image_data_by_index(stream_id, 0)\nimage_data_array = image_data[0].to_numpy_array()\ndebayered_array = image.debayer(image_data_array)\n'))),(0,n.mdx)(o.default,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-cpp"},'#include <dataprovider/VrsDataProvider.h>\n#include <image/utility/Debayer.h>\n\nauto streamId = provider.getStreamIdFromLabel("camera-rgb");\nauto imageData = provider.getImageDataByIndex(streamId, 0);\nauto debayeredImage = debayer(imageData.first.imageVariant());\n')))),(0,n.mdx)("p",null,(0,n.mdx)("img",{alt:"Image",src:t(85819).A,width:"912",height:"427"})),(0,n.mdx)("p",null,"See ",(0,n.mdx)("a",{parentName:"p",href:"https://github.com/facebookresearch/projectaria_tools/blob/main/core/image/utility/Debayer.cpp"},"projectaria_tools/core/image/utility/Debayer.cpp")," for implementation"),(0,n.mdx)("h2",{id:"image-undistortion"},"Image undistortion"),(0,n.mdx)("p",null,"In this example, we remove distortions in raw sensor data so that straight 3D lines appear straight in the undistorted images. There is existing C++ implementation and python wrapper of this helper function in the data utilities."),(0,n.mdx)(i.default,{groupId:"programming-language",mdxType:"Tabs"},(0,n.mdx)(o.default,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'from projectaria_tools.core import data_provider, calibration\n\ncamera_label = "camera-slam-left"\nstream_id = provider.get_stream_id_from_label(camera_label)\n\ncalib = provider.get_device_calibration().get_camera_calib(camera_label)\npinhole = calibration.get_linear_camera_calibration(512, 512, 150)\n\nraw_image = provider.get_image_data_by_index(stream_id, 0)[0].to_numpy_array()\nundistorted_image = calibration.distort_by_calibration(raw_image, pinhole, calib)\n'))),(0,n.mdx)(o.default,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-cpp"},'#include <dataprovider/VrsDataProvider.h>\n#include <calibration/utility/Distort.h>\n\nstd::string cameraLabel = "camera-rgb";\nvrs::StreamId streamId = provider->getStreamIdFromLabel(cameraLabel);\n\nCameraCalibration calib = provider->getCameraCalibration(streamId);\nCameraCalibration pinhole = getLinearCameraCalibration(512, 512, 150);\n\nImageData rawImage = provider->getImageDataByIndex(streamId, 0);\nauto undistortedImage = distortByCalibration(rawImage.imageVariant(), pinhole, calib);\n')))),(0,n.mdx)("p",null,(0,n.mdx)("img",{alt:"Image",src:t(79317).A,width:"810",height:"403"})),(0,n.mdx)("p",null,"See ",(0,n.mdx)("a",{parentName:"p",href:"https://github.com/facebookresearch/projectaria_tools/blob/main/core/calibration/utility/Distort.cpp"},"projectaria_tools/core/calibration/utility/Distort.cpp")," for implementation."),(0,n.mdx)("h2",{id:"rotated-image-clockwise-90-degrees"},"Rotated image clockwise 90 degrees"),(0,n.mdx)("p",null,"In this example, we rotated the RGB image 90 degrees and provide the new calibration object."),(0,n.mdx)("ul",null,(0,n.mdx)("li",{parentName:"ul"},"Calibration rotation only applies to pinhole camera model"),(0,n.mdx)("li",{parentName:"ul"},"Pinhole camera calibration object needs to be initialized as ",(0,n.mdx)("inlineCode",{parentName:"li"},"pinhole = calibration.get_linear_camera_calibration(512, 512, 150, camera_label, calib.get_transform_device_camera())"),"\nwith ",(0,n.mdx)("inlineCode",{parentName:"li"},"camera_label")," and the pose ",(0,n.mdx)("inlineCode",{parentName:"li"},"calib.get_transform_device_camera()")," so that ",(0,n.mdx)("inlineCode",{parentName:"li"},"pinhole_cw90")," can have the correct transformation matrix when unprojecting a pixel to get ",(0,n.mdx)("inlineCode",{parentName:"li"},"ray_in_device_frame"),".")),(0,n.mdx)(i.default,{groupId:"programming-language",mdxType:"Tabs"},(0,n.mdx)(o.default,{value:"python",label:"Python",mdxType:"TabItem"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'camera_label = "camera-rgb"\nstream_id = provider.get_stream_id_from_label(camera_label)\n\ncalib = provider.get_device_calibration().get_camera_calib(camera_label)\npinhole = calibration.get_linear_camera_calibration(512, 512, 150, camera_label,\ncalib.get_transform_device_camera())\n\nraw_image = provider.get_image_data_by_index(stream_id, 0)[0].to_numpy_array()\nundistorted_image = calibration.distort_by_calibration(raw_image, pinhole, calib)\n\n# Rotated image by CW90 degrees\nrotated_image = np.rot90(undistorted_image, k=3)\n\n# Get rotated image calibration\npinhole_cw90 = calibration.rotate_camera_calib_cw90deg(pinhole)\n\n# Unproject a pixel and get a ray from device coordinate frame\ntest_pixel_in_rotated_image = [10,0]\nray_in_device_frame =  pinhole_cw90.get_transform_device_camera() @ pinhole_cw90.unproject_no_checks(test_pixel_in_rotated_image)\n'))),(0,n.mdx)(o.default,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-cpp"},'#include <dataprovider/VrsDataProvider.h>\n#include <calibration/utility/Distort.h>\n\nstd::string cameraLabel = "camera-rgb";\nvrs::StreamId streamId = provider->getStreamIdFromLabel(cameraLabel);\n\nCameraCalibration calib = provider->getCameraCalibration(streamId);\nCameraCalibration pinhole = getLinearCameraCalibration(512, 512, 150, cameraLabel, calib.getT_Device_Camera());\n\n// Get rotated image calibration\nCameraCalibration pinholeCW90 = rotatedCameraCalibCW90Deg(pinhole);\n\n// Unproject a pixel and get a ray from device coordinate frame\nEigen::Vector2d textPixelInRotatedImage{10,0};\nauto ray = pinholeCW90.getT_Device_Camera() * pinholeCW90.projectNoChecks(textPixelInRotatedImage);\n')))))}b.isMDXComponent=!0},85819:(e,a,t)=>{t.d(a,{A:()=>r});const r=t.p+"assets/images/debayer-94c88a5c2c94e478d18f3ae8f9a33824.png"},79317:(e,a,t)=>{t.d(a,{A:()=>r});const r=t.p+"assets/images/undistortion-b8cdb1aa8b6fb5493555936859e284a7.png"}}]);